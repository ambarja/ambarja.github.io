{
  "hash": "83c19f2315b6a46df6260d78af6e64bc",
  "result": {
    "markdown": "---\ntitle: \"Netflix Original Movies - EDA\"\ndescription: |\n  Exploratory Data Analysis, and data vis with ggplot2.\nauthor:\n  - name: Karat Sidhu\n    url: {}\ndate: 2022-04-21\ncategories:\n  - GGplot2\n  - Data-Analysis\ntoc: true\ntoc-title: Table of contents\ntoc-location: left\n---\n\n\n\n\n# Netflix Movies\n\n![netflix-intro-netflix.gif (498×278)\n(tenor.com](https://c.tenor.com/QJNoPeq9WmUAAAAC/netflix-intro-netflix.gif)\n\n## Loading libraries\n\n``` r\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(lubridate))\nsuppressPackageStartupMessages(library(showtext))\nshowtext.auto()\n```\n\n    ## 'showtext.auto()' is now renamed to 'showtext_auto()'\n    ## The old version still works, but consider using the new function in future code\n\n``` r\nfont_add_google(\"Bebas Neue\", \"Bebas Neue\")\n```\n\n## Loading data\n\n``` r\nnetflix <- read.csv(\"NetflixOriginals.csv\")\n```\n\n## Looking at the data in brief\n\n``` r\nhead(netflix, 4)\n```\n\n    ##             Title                 Genre          Premiere Runtime IMDB.Score\n    ## 1 Enter the Anime           Documentary    August 5, 2019      58        2.5\n    ## 2     Dark Forces              Thriller   August 21, 2020      81        2.6\n    ## 3         The App Science fiction/Drama December 26, 2019      79        2.6\n    ## 4  The Open House       Horror thriller  January 19, 2018      94        3.2\n    ##           Language\n    ## 1 English/Japanese\n    ## 2          Spanish\n    ## 3          Italian\n    ## 4          English\n\n### Type of datatype in each column\n\n``` r\nas.tibble(sapply(netflix, class))\n```\n\n    ## Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n    ## Please use `as_tibble()` instead.\n    ## The signature and semantics have changed, see `?as_tibble`.\n    ## This warning is displayed once every 8 hours.\n    ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n\n    ## # A tibble: 6 × 1\n    ##   value    \n    ##   <chr>    \n    ## 1 character\n    ## 2 character\n    ## 3 character\n    ## 4 integer  \n    ## 5 numeric  \n    ## 6 character\n\n### Does the data contain any N/A values?\n\n``` r\nany(is.na(netflix))\n```\n\n    ## [1] FALSE\n\n## Converting the \\`premier\\` from chr to datetime\n\n``` r\nnetflix <- netflix %>% \n  mutate(Released = mdy(Premiere))\n```\n\n## Getting each year, month and date separated\n\n### Also adding the corresponding day of the week for each release\n\n``` r\nnetflix <- netflix %>% \n  mutate(Year = year(Released)) %>% \n  mutate(Month = month(Released, label = TRUE)) %>% \n  mutate(Date = day(Released)) %>% \n  mutate(Day = wday(Released, label = TRUE, abbr = FALSE))\n```\n\n## When the movies were released\n\n### Number of Movies released each year\n\n``` r\nnetflix %>%\n  group_by(Year) %>%\n  summarise(total = n()) %>%\n  ggplot(aes(\n    x = Year,\n    y = total,\n    fill = ifelse(total == max(total), \"red\",\"grey\"))) +\n  geom_col() +\n  labs(title = \"Netflix Movies released each year\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"#2d2d2d\", \"#E50914\")) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 35,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor  = element_blank(),\n    text = element_text(size = 20))\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-8-1.png)<!-- -->\n\n### Number of Movies released each month\n\n``` r\nnetflix %>%\n  group_by(Month) %>%\n  summarise(total = n()) %>%\n  ggplot(aes(\n    x = Month,\n    y = total,\n    fill = ifelse(total == max(total), \"red\",\"grey\"))) +\n  geom_col() +\n    labs(title = \"Netflix Movies released each month\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 30,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    text = element_text(size = 20))\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-9-1.png)<!-- -->\n\n### Number of Movies released by date of the month\n\n``` r\nnetflix %>%\n  group_by(Date) %>%\n  summarise(total = n()) %>%\n  ggplot(aes(\n    x = Date,\n    y = total,\n    fill = ifelse(total == max(total), \"red\",\"grey\")))  +\n  geom_col() +\n    labs(title = \"Netflix Movies released by Date of each month\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 30,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    text = element_text(size = 20))\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-10-1.png)<!-- -->\n\n### Number of Movies released each day of the week\n\n``` r\nnetflix %>%\n  group_by(Day) %>%\n  summarise(total = n()) %>%\n  ggplot(aes(\n    x = Day,\n    y = total,\n    fill = ifelse(total == max(total), \"red\",\"black\"))) +\n  geom_col() +\n  labs(title = \"Netflix Movies released by day of the week\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 30,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    text = element_text(size = 20))\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-11-1.png)<!-- -->\n\n## Most Popular Genres\n\n### 5 Most Popular Genres\n\n``` r\nnetflix %>% \n  group_by(Genre) %>% \n  summarise(Movies = n()) %>% \n  arrange(desc(Movies)) %>% \n  head(5) %>% \n   ggplot(aes(\n    x = reorder(Genre, -Movies),\n    y = Movies,\n    fill = ifelse(Movies == max(Movies), \"red\", \"black\"))) +\n  geom_col() +\n  labs(title = \"Most Popular Genres\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 30,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    text = element_text(size = 20))\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-12-1.png)<!-- -->\n\n## Most Popular Languages\n\n### 5 Most Popular Languages\n\n``` r\nnetflix %>% \n  group_by(Language) %>% \n  summarise(Movies = n()) %>% \n  arrange(desc(Movies)) %>% \n  head(5) %>% \n   ggplot(aes(\n    x = reorder(Language, -Movies),\n    y = Movies,\n    fill = ifelse(Movies == max(Movies), \"red\", \"black\"))) +\n  geom_col() +\n  labs(title = \"Most Popular Languages\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 30,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    text = element_text(size = 20))\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-13-1.png)<!-- -->\n\n## IMDB Scores\n\n### How were most movies rated?\n\n``` r\nnetflix %>%\n  ggplot(aes(x = `IMDB.Score`)) +\n  geom_dotplot(binwidth = 0.1,\n               fill = \"#2d2d2d\",\n               color = \"#e9ecef\") +\n  labs(title = \"IMDB Score Distribution\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 25,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank()\n  ) \n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-14-1.png)<!-- -->\n\n### Highest Rated Movies\n\n``` r\nnetflix %>% \n  arrange(desc(`IMDB.Score`)) %>% \n  head(5) %>% \n   ggplot(aes(\n    x = reorder(`Title`, `IMDB.Score`),\n    y = `IMDB.Score`,\n    fill = ifelse(`IMDB.Score` == max(`IMDB.Score`), \"red\", \"black\"))) +\n  geom_col() +\n  labs(title = \"Highest Rated Movies\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  coord_flip() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 25,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank())\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-15-1.png)<!-- -->\n\n### Lowest Rated Movies\n\n``` r\nnetflix %>% \n  arrange(desc(-`IMDB.Score`)) %>% \n  head(5) %>% \n  ggplot(aes(\n    x = reorder(`Title`, -`IMDB.Score`),\n    y = `IMDB.Score`,\n    fill = ifelse(`IMDB.Score` == min(`IMDB.Score`), \"red\", \"black\"))) +\n  geom_col() +\n  labs(title = \"Lowest Rated Movies\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  coord_flip() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 25,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank())\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-16-1.png)<!-- -->\n\n## Runtime\n\n### How long are the movies?\n\n``` r\nnetflix %>%\n  ggplot(aes(x = Runtime)) +\n  geom_dotplot(binwidth = 2.25,\n               fill = \"#2d2d2d\",\n               color = \"#e9ecef\") +\n  labs(title = \"Movie Runtime\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 25,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank()\n  ) \n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-17-1.png)<!-- -->\n\n### Longest Movies\n\n``` r\nnetflix %>% \n  arrange(desc(Runtime)) %>% \n  head(5) %>% \n  ggplot(aes(\n    x = reorder(`Title`, `Runtime`),\n    y = `Runtime`,\n    fill = ifelse(Runtime == max(`Runtime`), \"red\", \"black\"))) +\n  geom_col() +\n  labs(title = \"Longest Movies\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  coord_flip() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 25,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank())\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-18-1.png)<!-- -->\n\n### Shortest Movies\n\n``` r\nnetflix %>% \n  arrange(desc(-Runtime)) %>% \n  head(5) %>% \n  ggplot(aes(\n    x = reorder(`Title`, `Runtime`),\n    y = `Runtime`,\n    fill = ifelse(Runtime == min(`Runtime`), \"red\", \"black\"))) +\n  geom_col() +\n  labs(title = \"Shortest Movies\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  coord_flip() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 25,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    text = element_text(size = 20))\n```\n\n![](nefllix_files/figure-gfm/unnamed-chunk-19-1.png)<!-- -->\n\n## Runtime vs IMDB-Score\n\n``` r\nnetflix %>% \n  ggplot(aes(x=`IMDB.Score`, y= Runtime)) +\n  geom_point() +\n  geom_smooth(method = lm,colour = \"#E50914\") +\n  labs(title = \"Runtime vs IMDB Rating\") +\n  theme_minimal() +\n  scale_fill_manual(values = c( \"#2d2d2d\", \"#E50914\")) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      family = \"Bebas Neue\",\n      size = 25,\n      colour = \"#E50914\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.x = element_blank())\n```\n\n    ## `geom_smooth()` using formula 'y ~ x'\n\n![](nefllix_files/figure-gfm/unnamed-chunk-20-1.png)<!-- -->\n\n## Basic Statistical Analysis\n\n### Linear Models\n\n``` r\nmodel <- lm(data = netflix, formula = Runtime ~ `IMDB.Score`)\nsummary(model)\n```\n\n    ## \n    ## Call:\n    ## lm(formula = Runtime ~ IMDB.Score, data = netflix)\n    ## \n    ## Residuals:\n    ##     Min      1Q  Median      3Q     Max \n    ## -91.399  -7.439   3.398  14.467 117.195 \n    ## \n    ## Coefficients:\n    ##             Estimate Std. Error t value Pr(>|t|)    \n    ## (Intercept)  100.849      7.453  13.531   <2e-16 ***\n    ## IMDB.Score    -1.159      1.174  -0.987    0.324    \n    ## ---\n    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    ## \n    ## Residual standard error: 27.76 on 582 degrees of freedom\n    ## Multiple R-squared:  0.001673,   Adjusted R-squared:  -4.283e-05 \n    ## F-statistic: 0.975 on 1 and 582 DF,  p-value: 0.3238\n\n### Correlation Test\n\n``` r\nres <- cor.test(netflix$Runtime, netflix$IMDB.Score, \n                    method = \"pearson\")\nres\n```\n\n    ## \n    ##  Pearson's product-moment correlation\n    ## \n    ## data:  netflix$Runtime and netflix$IMDB.Score\n    ## t = -0.98744, df = 582, p-value = 0.3238\n    ## alternative hypothesis: true correlation is not equal to 0\n    ## 95 percent confidence interval:\n    ##  -0.12162699  0.04037194\n    ## sample estimates:\n    ##         cor \n    ## -0.04089629\n\n### P-value\n\n``` r\nres$p.value\n```\n\n    ## [1] 0.3238393\n\n### Correlation Coefficient\n\n``` r\nres$estimate\n```\n\n    ##         cor \n    ## -0.04089629\n\n## Thank you!\n\n![end](https://c.tenor.com/07cmziHz9hQAAAAC/curb-your-enthusiasm-curb-your-enthusiasm-outro.gif)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}