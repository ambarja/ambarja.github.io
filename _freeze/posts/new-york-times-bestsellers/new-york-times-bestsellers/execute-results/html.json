{
  "hash": "471bea113979ddb10e474964599885fa",
  "result": {
    "markdown": "---\ntitle: \"New York Times Bestsellers\"\ndescription: |\n  Working with geom_jitter and ggrepel to create a great looking plot.\nauthor:\n  - name: Karat Sidhu\n    url: {}\ndate: 2022-05-10\ncategories:\n  - TidyTuesday\n  - Data-Viz\n  - TidyVerse\nimage: images/logo.png\ntoc: true\ntoc-title: Table of contents\ntoc-location: left\n---\n\n\n\n\nLooking at the New York Times Bestsellers by Decade; data by Post45\n\n## Loading Libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output-stderr}\n```\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(showtext)\n```\n\n::: {.cell-output-stderr}\n```\nLoading required package: sysfonts\n```\n:::\n\n::: {.cell-output-stderr}\n```\nLoading required package: showtextdb\n```\n:::\n\n```{.r .cell-code}\nshowtext_opts(dpi = 450)\nshowtext_auto(enable = TRUE)\nlibrary(ggtext)\nlibrary(ggrepel)\nfont_add_google(family = \"Roboto\", name = \"Roboto\")\nfont_add_google(family = \"Outfit\", name = \"Outfit\")\n```\n:::\n\n## Loading Data\n\n::: {.cell}\n\n```{.r .cell-code}\nnyt_titles <-\n    readr::read_tsv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv\")\n```\n\n::: {.cell-output-stderr}\n```\nRows: 7431 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (2): title, author\ndbl  (5): id, year, total_weeks, debut_rank, best_rank\ndate (1): first_week\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nnyt_full <-\n    readr::read_tsv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_full.tsv\")\n```\n\n::: {.cell-output-stderr}\n```\nRows: 60386 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (2): title, author\ndbl  (3): year, rank, title_id\ndate (1): week\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncolors_legend <- c(\n    \"#FFB327\",\n    \"#08748f\",\n    \"#4F607C\",\n    \"#2d6554\",\n    \"#8E038E\",\n    \"#5A6D87\",\n    \"#000000\",\n    \"#725050\",\n    \"#542ea5\",\n    \"#304d30\",\n    \"#8E038E\"\n)\n```\n:::\n\n\n## Data Cleaning and basic EDA\n\n::: {.cell}\n\n```{.r .cell-code}\nnytitiles_weeks <- nyt_titles %>%\n    mutate(\n        decade = (year %/% 10) * 10\n    ) %>%\n    group_by(decade) %>%\n    slice(which.max(total_weeks)) %>%\n    mutate(title_new = paste(title, \"(\", total_weeks, \"Weeks )\"))\nnytitiles_weeks\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 10 × 10\n# Groups:   decade [10]\n      id title   author  year total_weeks first_week debut_rank best_rank decade\n   <dbl> <chr>   <chr>  <dbl>       <dbl> <date>          <dbl>     <dbl>  <dbl>\n 1   481 ANTHON… Herve…  1933          86 1933-07-03          1         1   1930\n 2  6157 THE RO… Lloyd…  1942         111 1942-11-09          5         1   1940\n 3  4749 THE CA… Herma…  1951         123 1951-04-22         13         1   1950\n 4  6887 TO KIL… Harpe…  1960          98 1960-08-07         14         2   1960\n 5  2363 ILLUSI… Richa…  1977          80 1977-06-19         10         2   1970\n 6  4679 THE BO… Tom W…  1987          56 1987-11-08          1         1   1980\n 7  3343 OH, TH… Dr. S…  1990         178 1990-02-25         14         1   1990\n 8  4918 THE DA… Dan B…  2003         165 2003-04-06          9         1   2000\n 9   381 ALL TH… Antho…  2014         132 2014-05-25          2         1   2010\n10   414 AMERIC… Jeani…  2020          34 2020-02-09         12         1   2020\n# … with 1 more variable: title_new <chr>\n```\n:::\n:::\n\n## Making the plot\n\n::: {.cell preview='false'}\n\n```{.r .cell-code}\nnyt_titles %>%\n    mutate(\n        decade = (year %/% 10) * 10\n    ) %>%\n    ggplot(aes(\n        x = as.factor(reorder(decade, -decade)),\n        y = total_weeks,\n        group = decade,\n        color = as.factor(decade)\n    )) +\n    geom_jitter(width = 0.25, alpha = 0.2, size = 0.85) +\n    geom_text_repel(aes(\n        label = title_new,\n        family = \"Outfit\"\n    ),\n    size = 4.5,\n    data = nytitiles_weeks, alpha = 0.9,\n    box.padding = 0.35\n    ) +\n    geom_point(\n        data = nytitiles_weeks,\n        aes(\n            x = as.factor(decade),\n            y = total_weeks\n        ),\n        size = 2\n    ) +\n    theme_minimal() +\n    labs(\n        title = \"NYTIMES BESTSELLERS\",\n        subtitle = \"**Bestsellers; by Decade.** <br>Looking at the number of weeks each book stayed on the NYTimes bestsellers<br> list every decade. Most popular bestselling book with the most weeks on the <br> list is labelled for each decade.\",\n        caption = \"Data: Post45 | Graphic: github.com/SidhuK\"\n    ) +\n    ylab(\"Weeks\") +\n    theme(\n        legend.position = \"none\",\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.title = element_markdown(family = \"Cookie\", size = 10),\n        plot.subtitle = element_markdown(family = \"Outfit\", size = 18),\n        plot.caption = element_markdown(family = \"Outfit\", size = 12),\n        axis.title.y = element_blank(),\n        axis.title.x = element_text(size = 18),\n        axis.text = element_text(size = 14),\n    ) +\n    scale_color_manual(\n        values = colors_legend,\n        name = NULL\n    ) +\n    coord_flip()\n```\n\n::: {.cell-output-stderr}\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Cookie' not found, will use 'sans' instead\n```\n:::\n\n::: {.cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Cookie' not found, will use 'sans' instead\n```\n:::\n\n::: {.cell-output-stderr}\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Cookie' not found, will use 'sans' instead\n```\n:::\n\n::: {.cell-output-stderr}\n```\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Cookie' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Cookie' not found, will use 'sans' instead\n```\n:::\n\n::: {.cell-output-display}\n![](new-york-times-bestsellers_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n",
    "supporting": [
      "new-york-times-bestsellers_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}