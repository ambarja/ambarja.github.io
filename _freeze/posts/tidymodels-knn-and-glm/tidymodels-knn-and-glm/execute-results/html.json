{
  "hash": "eb79370e8ff485c753ebc2f1fbfae827",
  "result": {
    "markdown": "---\ntitle: \"TidyModels - KNN & GLM\"\ndescription: |\n  Working with TidyModels to generate KNN and GLM models for the palmer penguins dataset.\nauthor:\n  - name: Karat Sidhu\n    url: {}\ndate: 2022-05-24\nimage: images/logo.jpeg\ncategories:\n  - TidyModels\n  - KNN\n  - GLM\n  - Machine Learning\n  - Classification\ntoc: true\ntoc-title: Table of contents\ntoc-location: left\n---\n\n\n\n\n\n# TidyModels - KNN and GLM\n\n# Palmer Penguins Time!!\n\n![image](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png)\n(Figure from `@Allison_Horst`)\n\nThis is part 3 of my TidyModels blogs. The first part^[https://karatsidhu.com/posts/tidymodels-svm-random-forests/] \ndealt with Random Forests and SVM while the second part^[https://karatsidhu.com/posts/tidymodels-pca-and-umap/] I tried out\nPCA and UMAP using TidyModels packages.\n\nThis time, I will be trying to perform K-Nearest Neighbors and Linear Modelling using TidyModels.\n\n# Loading Datasets, Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 0.2.0 ──\n```\n:::\n\n::: {.cell-output-stderr}\n```\n✔ broom        0.8.0     ✔ recipes      0.2.0\n✔ dials        0.1.1     ✔ rsample      0.1.1\n✔ dplyr        1.0.9     ✔ tibble       3.1.7\n✔ ggplot2      3.3.6     ✔ tidyr        1.2.0\n✔ infer        1.0.0     ✔ tune         0.2.0\n✔ modeldata    0.1.1     ✔ workflows    0.2.6\n✔ parsnip      0.2.1     ✔ workflowsets 0.2.1\n✔ purrr        0.3.4     ✔ yardstick    0.0.9\n```\n:::\n\n::: {.cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output-stderr}\n```\n✔ readr   2.1.2     ✔ forcats 0.5.1\n✔ stringr 1.4.0     \n```\n:::\n\n::: {.cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\n```\n:::\n\n```{.r .cell-code}\ndata(\"penguins\")\nglimpse(penguins)\n```\n\n::: {.cell-output-stdout}\n```\nRows: 344\nColumns: 7\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n```\n:::\n\n```{.r .cell-code}\npenguins <- na.omit(penguins)\n```\n:::\n\n\n## Explore data\n\nExploratory data analysis (EDA) is an important part of the modeling\nprocess^[https://www.tmwr.org/software-modeling.html#model-phases].I am using the default tidymodels\ntemplate so will be using the inbuilt EDA performace cells to check the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(bill_depth_mm, bill_length_mm, color = sex, size = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~species) +\n  hrbrthemes::theme_ipsum()\n```\n\n::: {.cell-output-display}\n![](tidymodels-knn-and-glm_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nWe see a clear relation between the sex of the penguins with and their bill depth. Further, we can\nalso see a relation between the bill length for each of the species looks difference wrt to the other.\n\n\n## Build models\n\nLet's consider how to spend our data budget^[https://www.tmwr.org/splitting.html]:\n\n- create training and testing sets\n- create resampling folds from the *training* set\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\npenguin_split <- initial_split(penguins, strata = sex)\npenguin_train <- training(penguin_split)\npenguin_test <- testing(penguin_split)\n\nset.seed(234)\npenguin_folds <- vfold_cv(penguin_train, strata = sex)\npenguin_folds\n```\n\n::: {.cell-output-stdout}\n```\n#  10-fold cross-validation using stratification \n# A tibble: 10 × 2\n   splits           id    \n   <list>           <chr> \n 1 <split [223/26]> Fold01\n 2 <split [223/26]> Fold02\n 3 <split [223/26]> Fold03\n 4 <split [224/25]> Fold04\n 5 <split [224/25]> Fold05\n 6 <split [224/25]> Fold06\n 7 <split [225/24]> Fold07\n 8 <split [225/24]> Fold08\n 9 <split [225/24]> Fold09\n10 <split [225/24]> Fold10\n```\n:::\n:::\n\nLet's create a model specification^[https://www.tmwr.org/models.html] for each model we want to try:\n\n## GLM\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_spec <-\n  logistic_reg() %>%\n  set_engine(\"glm\")\n```\n:::\n\n## KNN\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_spec <- nearest_neighbor() %>%\n  set_engine(\"kknn\") %>%\n  set_mode(\"classification\")\n```\n:::\n\n\nTo set up your modeling code, consider using the parsnip addin^[https://parsnip.tidymodels.org/reference/parsnip_addin.html]\nor the usemodels^[https://usemodels.tidymodels.org/] package.\n\nNow let's build a model workflow^[https://www.tmwr.org/workflows.html] combining\neach model specification with a data preprocessor:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_formula <- sex ~ .\n\nglm_wf    <- workflow(penguin_formula, glm_spec)\n\nknn_wf <- workflow(penguin_formula, knn_spec)\n```\n:::\n\nIf your feature engineering needs are more complex than provided by a formula like `sex ~ .`, use a recipe^[https://www.tidymodels.org/start/recipes/]\n\n\n## Evaluate models\n\nThese models have no tuning parameters so we can evaluate them as they are. [Learn about tuning hyperparameters here^[https://www.tidymodels.org/start/tuning/]\n\n::: {.cell}\n\n```{.r .cell-code}\ncontrl_preds <- control_resamples(save_pred = TRUE)\n\nglm_rs <- fit_resamples(\n  glm_wf,\n  resamples = penguin_folds,\n  control = contrl_preds\n)\n```\n\n::: {.cell-output-stderr}\n```\n! Fold05: preprocessor 1/1, model 1/1: glm.fit: fitted probabilities numerically 0...\n```\n:::\n\n```{.r .cell-code}\nknn_rs <- fit_resamples(\n  knn_wf,\n  resamples = penguin_folds,\n  control = contrl_preds\n)\n```\n:::\n\nHow did these two models compare?\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(glm_rs)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric  .estimator  mean     n std_err .config             \n  <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy binary     0.916    10  0.0173 Preprocessor1_Model1\n2 roc_auc  binary     0.975    10  0.0105 Preprocessor1_Model1\n```\n:::\n\n```{.r .cell-code}\ncollect_metrics(knn_rs)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric  .estimator  mean     n std_err .config             \n  <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy binary     0.912    10 0.0132  Preprocessor1_Model1\n2 roc_auc  binary     0.979    10 0.00697 Preprocessor1_Model1\n```\n:::\n:::\n\n\n## ROC Curve comparing the two models.\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(\n  collect_predictions(glm_rs) %>%\n    mutate(mod = \"glm\"),\n  collect_predictions(knn_rs) %>%\n    mutate(mod = \"knn\")\n) %>%\n  group_by(mod) %>%\n  roc_curve(sex, .pred_female) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](tidymodels-knn-and-glm_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\nThese models perform very similarly, so perhaps we would choose the simpler, linear model. The function `last_fit()` *fits* one final time on the training data and *evaluates* on the testing data. This is the first time we have used the testing data.\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fitted <- last_fit(glm_wf, penguin_split)\ncollect_metrics(final_fitted)  ## metrics evaluated on the *testing* data\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.857 Preprocessor1_Model1\n2 roc_auc  binary         0.937 Preprocessor1_Model1\n```\n:::\n:::\n\nThis object contains a fitted workflow that we can use for prediction.\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_wf <- extract_workflow(final_fitted)\npredict(final_wf, penguin_test[59,])\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 1\n  .pred_class\n  <fct>      \n1 male       \n```\n:::\n\n```{.r .cell-code}\npenguin_test[59,]\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 7\n  species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex  \n  <fct>   <fct>           <dbl>         <dbl>            <int>       <int> <fct>\n1 Gentoo  Biscoe           46.5          14.8              217        5200 fema…\n```\n:::\n:::\n\n\nYou can save this fitted `final_wf` object to use later with new data, for example with `readr::write_rds()`.\n\n\n# Additional Reading: \n\n- https://rstudio-pubs-static.s3.amazonaws.com/749128_01ee1cc430c348438b211f3db0ed6d0a.html\n\n- https://emilhvitfeldt.github.io/ISLR-tidymodels-labs/index.html\n\n- https://www.tidymodels.org/learn/models/\n\n- https://juliasilge.com/blog/palmer-penguins/",
    "supporting": [
      "tidymodels-knn-and-glm_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}