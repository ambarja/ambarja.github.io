{
  "hash": "e9cae4b5330fb9e8e6c3077cd64267b5",
  "result": {
    "markdown": "---\ntitle: \"TidyModels - PCA and UMAP\"\ndescription: |\n  Working with TidyModels to generate PCA and UMAP for Cocktail recipes. Using these\n  recipes extrapolating the relation of a cocktail to each other.\nauthor:\n  - name: Karat Sidhu\n    url: {}\ndate: 2022-05-22\nimage: images/logo.jpeg\ncategories:\n  - TidyModels\n  - PCA\n  - UMAP\n  - Machine Learning\n  - Dimension Reduction\ntoc: true\ntoc-title: Table of contents\ntoc-location: left\n---\n\n\n\n\n\n# TidyModels - PCA & UMAP\n\n## Dimensionality Reduction analysis with Tidymodels\n\n**Note: This is part 2 of the tidymodels practise. A few of these RMarkdown files were generated on a date different to the publishing date.**\n\nPrincipal Component analysis (and UMAP to a lesser extent) have been extensively used in Biological Sciences \nand specifically in Omics. Compared to other components of the TidyVerse, I am fairly comfortable using and running the PCA test\non a set of data. However, I typically use either the base R (`prcom`) or PCA Tools^[https://bioconductor.org/packages/release/bioc/html/PCAtools.html] because generating a series of plots using those packages\nis fairly straightforward^[https://github.com/SidhuK/R_for_Metabolomics/tree/main/Principal_Component_Analysis].\n\n\n\n# Cocktail Recipes Dataset\n\nThe dataset used is from the Tidytuesday data, where different cocktails and the components used for their recipes is provided.  \nReducing dimensions in such a case would help in finding out which cocktail is closely related to the other in terms of their components.\n\n\n# Loading packages\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output-stderr}\n```\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 0.2.0 ──\n```\n:::\n\n::: {.cell-output-stderr}\n```\n✔ broom        0.8.0     ✔ rsample      0.1.1\n✔ dials        0.1.1     ✔ tune         0.2.0\n✔ infer        1.0.0     ✔ workflows    0.2.6\n✔ modeldata    0.1.1     ✔ workflowsets 0.2.1\n✔ parsnip      0.2.1     ✔ yardstick    0.0.9\n✔ recipes      0.2.0     \n```\n:::\n\n::: {.cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidytext)\n```\n:::\n\n\n\n# Loading Data\n\n::: {.cell}\n\n```{.r .cell-code}\nboston_cocktails <-\n  readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-26/boston_cocktails.csv\")\n```\n\n::: {.cell-output-stderr}\n```\nRows: 3643 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): name, category, ingredient, measure\ndbl (2): row_id, ingredient_number\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n\n# Data Cleaning and Exploratory Data Analysis\n\nPreliminary look at the data\n\n::: {.cell}\n\n```{.r .cell-code}\nboston_cocktails\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 3,643 × 6\n   name            category           row_id ingredient_numb… ingredient measure\n   <chr>           <chr>               <dbl>            <dbl> <chr>      <chr>  \n 1 Gauguin         Cocktail Classics       1                1 Light Rum  2 oz   \n 2 Gauguin         Cocktail Classics       1                2 Passion F… 1 oz   \n 3 Gauguin         Cocktail Classics       1                3 Lemon Jui… 1 oz   \n 4 Gauguin         Cocktail Classics       1                4 Lime Juice 1 oz   \n 5 Fort Lauderdale Cocktail Classics       2                1 Light Rum  1 1/2 …\n 6 Fort Lauderdale Cocktail Classics       2                2 Sweet Ver… 1/2 oz \n 7 Fort Lauderdale Cocktail Classics       2                3 Juice of … 1/4 oz \n 8 Fort Lauderdale Cocktail Classics       2                4 Juice of … 1/4 oz \n 9 Apple Pie       Cordials and Liqu…      3                1 Apple sch… 3 oz   \n10 Apple Pie       Cordials and Liqu…      3                2 Cinnamon … 1 oz   \n# … with 3,633 more rows\n```\n:::\n:::\n\nSo the PCA should be carried out for the \"name\" field and looking at the relation between the cocktail and the incredients, category and the measured amount of each ingredient used. \n\n## Most Common Ingredients\n\n::: {.cell}\n\n```{.r .cell-code}\nboston_cocktails |>\n  count(ingredient, sort = TRUE)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 569 × 2\n   ingredient            n\n   <chr>             <int>\n 1 Gin                 176\n 2 Fresh lemon juice   138\n 3 Simple Syrup        115\n 4 Vodka               114\n 5 Light Rum           113\n 6 Dry Vermouth        107\n 7 Fresh Lime Juice    107\n 8 Triple Sec          107\n 9 Powdered Sugar       90\n10 Grenadine            85\n# … with 559 more rows\n```\n:::\n:::\n\nA lot of cocktails look like are using Gin, Lemon Juice, Syrup and Vodka as some of the most common ingredients. \n\n\n## Column Cleaning and data conversion\n\nThe data isn't very clean yet. Some ingredients, which are clearly the same are labelled slightly differently. \nSo we need to clean and make the data usable for our analysis. \n\nSome of the main changes needed in the **ingredients**:\n\n- turn all ingredients to lowercase\n\n- \"-\" needs to be chagned to \" \"\n\n- \"lemon\" to \"lemon Juice\"\n\n- \"lime\" to \"lime juice\"\n\n- \"grapefruit\" to \"grapefruit juice\" (same for orange)\n\n\nSome of the main changes needed in the **measure**:\n\n- 1/2 to 0.5\n\n- 3/4 to 0.75\n\n- 1/4 to 0.25\n\n- remove words like \"dash\", and \"oz\" etc.\n\n- Convert the entire column into a number\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncocktails <- boston_cocktails |> \n  mutate(\n    ingredient = str_to_lower(ingredient),\n    ingredient = str_replace_all(ingredient, \"-\", \" \"),\n    ingredient = str_remove(ingredient, \" liqueur$\"),\n    ingredient = str_remove(ingredient, \" (if desired)$\"),\n    ingredient = case_when(\n      str_detect(ingredient, \"bitters\") ~ \"bitters\",\n      str_detect(ingredient, \"lemon\") ~ \"lemon juice\",\n      str_detect(ingredient, \"lime\") ~ \"lime juice\",\n      str_detect(ingredient, \"grapefruit\") ~ \"grapefruit juice\",\n      str_detect(ingredient, \"orange\") ~ \"orange juice\",\n      TRUE ~ ingredient\n    ),\n    measure = case_when(\n      str_detect(ingredient, \"bitters\") ~ str_replace(measure, \"oz$\", \"dash\"),\n      TRUE ~ measure\n    ),\n    measure = str_replace(measure, \" ?1/2\", \".5\"),\n    measure = str_replace(measure, \" ?3/4\", \".75\"),\n    measure = str_replace(measure, \" ?1/4\", \".25\"),\n    measure_number = parse_number(measure),\n    measure_number = if_else(str_detect(measure, \"dash$\"), # a few drops = so 0.02 oz\n      measure_number / 50,\n      measure_number\n    )\n  ) |> \n  add_count(ingredient) |> \n  filter(n > 15) |> \n  select(-n) |> \n  distinct(row_id, ingredient, .keep_all = TRUE) |> \n  na.omit()\n```\n\n::: {.cell-output-stderr}\n```\nWarning: 20 parsing failures.\nrow col expected    actual\n637  -- a number For glass\n671  -- a number For glass\n794  -- a number For glass\n878  -- a number For glass\n928  -- a number For glass\n... ... ........ .........\nSee problems(...) for more details.\n```\n:::\n\n```{.r .cell-code}\ncocktails\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 2,542 × 7\n   name       category row_id ingredient_numb… ingredient measure measure_number\n   <chr>      <chr>     <dbl>            <dbl> <chr>      <chr>            <dbl>\n 1 Gauguin    Cocktai…      1                1 light rum  2 oz              2   \n 2 Gauguin    Cocktai…      1                3 lemon jui… 1 oz              1   \n 3 Gauguin    Cocktai…      1                4 lime juice 1 oz              1   \n 4 Fort Laud… Cocktai…      2                1 light rum  1.5 oz            1.5 \n 5 Fort Laud… Cocktai…      2                2 sweet ver… .5 oz             0.5 \n 6 Fort Laud… Cocktai…      2                3 orange ju… .25 oz            0.25\n 7 Fort Laud… Cocktai…      2                4 lime juice .25 oz            0.25\n 8 Cuban Coc… Cocktai…      4                1 lime juice .5 oz             0.5 \n 9 Cuban Coc… Cocktai…      4                2 powdered … .5 oz             0.5 \n10 Cuban Coc… Cocktai…      4                3 light rum  2 oz              2   \n# … with 2,532 more rows\n```\n:::\n:::\n\n## New Dataframe with a \"wide\" format\n\nWe're now close to beginning our analysis. However, the data is in long format \nand PCA prefers to get the data wider. So we'll pivot_wide to make the analysis easier.\n\n::: {.cell}\n\n```{.r .cell-code}\ncocktails_df <- cocktails |> \n  select(-ingredient_number, -row_id, -measure) |> \n  pivot_wider(names_from = ingredient, values_from = measure_number, values_fill = 0) |> \n  janitor::clean_names() |> \n  na.omit()\n\ncocktails_df\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 937 × 42\n   name    category light_rum lemon_juice lime_juice sweet_vermouth orange_juice\n   <chr>   <chr>        <dbl>       <dbl>      <dbl>          <dbl>        <dbl>\n 1 Gauguin Cocktai…      2           1          1               0           0   \n 2 Fort L… Cocktai…      1.5         0          0.25            0.5         0.25\n 3 Cuban … Cocktai…      2           0          0.5             0           0   \n 4 Cool C… Cocktai…      0           0          0               0           1   \n 5 John C… Whiskies      0           1          0               0           0   \n 6 Cherry… Cocktai…      1.25        0          0               0           0   \n 7 Casa B… Cocktai…      2           0          1.5             0           0   \n 8 Caribb… Cocktai…      0.5         0          0               0           0   \n 9 Amber … Cordial…      0           0.25       0               0           0   \n10 The Jo… Whiskies      0           0.5        0               0           0   \n# … with 927 more rows, and 35 more variables: powdered_sugar <dbl>,\n#   dark_rum <dbl>, cranberry_juice <dbl>, pineapple_juice <dbl>,\n#   bourbon_whiskey <dbl>, simple_syrup <dbl>, cherry_flavored_brandy <dbl>,\n#   light_cream <dbl>, triple_sec <dbl>, maraschino <dbl>, amaretto <dbl>,\n#   grenadine <dbl>, apple_brandy <dbl>, brandy <dbl>, gin <dbl>,\n#   anisette <dbl>, dry_vermouth <dbl>, apricot_flavored_brandy <dbl>,\n#   bitters <dbl>, straight_rye_whiskey <dbl>, benedictine <dbl>, …\n```\n:::\n:::\n\nThis will be the starting dataset used to run PCA (and UMAP)\n\n\n# Principal Component Analysis\n\nHenceforth I will be using CMDLineTips Post^[https://cmdlinetips.com/2020/06/pca-with-tidymodels-in-r/] as a reference\nbecause I've never done a PCA with TidyModels before.\n\n## Prepare the analysis\n\n### Recipe code\n\n::: {.cell}\n\n```{.r .cell-code}\npca_rec <- recipe(~., data = cocktails_df) |>  # what data to use\n  update_role(name, category, new_role = \"id\") |> # name and category are identifiers not variables\n  step_normalize(all_predictors()) |> # normalize all other columns\n  step_pca(all_predictors()) # pca for all other columns\n```\n:::\n\n### Prep Code\n\n::: {.cell}\n\n```{.r .cell-code}\npca_prep <- prep(pca_rec)\n\npca_prep\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        id          2\n predictor         40\n\nTraining data contained 937 data points and no missing data.\n\nOperations:\n\nCentering and scaling for light_rum, lemon_juice, lime_juice, sweet_vermo... [trained]\nPCA extraction with light_rum, lemon_juice, lime_juice, sweet_vermou... [trained]\n```\n:::\n:::\n\nThe prep object now doesn't contain any output, and we need to tidy the object to read it.\nList object contains the PCA \"results\" and components on the 2nd place under \"term_info\" (open it in the console to see details).\n\n## PCA Table\n\n::: {.cell}\n\n```{.r .cell-code}\ntidied_pca <- tidy(pca_prep, 2)\n\ntidied_pca\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1,600 × 4\n   terms             value component id       \n   <chr>             <dbl> <chr>     <chr>    \n 1 light_rum        0.163  PC1       pca_yx0os\n 2 lemon_juice     -0.0140 PC1       pca_yx0os\n 3 lime_juice       0.224  PC1       pca_yx0os\n 4 sweet_vermouth  -0.0661 PC1       pca_yx0os\n 5 orange_juice     0.0308 PC1       pca_yx0os\n 6 powdered_sugar  -0.476  PC1       pca_yx0os\n 7 dark_rum         0.124  PC1       pca_yx0os\n 8 cranberry_juice  0.0954 PC1       pca_yx0os\n 9 pineapple_juice  0.119  PC1       pca_yx0os\n10 bourbon_whiskey  0.0963 PC1       pca_yx0os\n# … with 1,590 more rows\n```\n:::\n:::\n## PCA Plots\n\nA lot of Principal components seen, plotting the first 4\n\n::: {.cell}\n\n```{.r .cell-code}\ntidied_pca |> \n  filter(\n    component == \"PC1\" |\n      component == \"PC2\" |\n      component == \"PC3\" |\n      component == \"PC4\"\n   ) |> \n  mutate(component = fct_inorder(component)) |> \n    ggplot(aes(value, terms, fill = terms)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~component, nrow = 1) +\n  hrbrthemes::theme_ipsum() +\n  labs(y = NULL) \n```\n\n::: {.cell-output-display}\n![](tidymodels-pca-and-umap_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\nLooking at the PC1, simple syrup and powdered sugar are very different from each other, therefore the cocktails \nmust be using one or the other. They also appear to be the two biggest factors.\n\n### PC1 and PC2 main contributors\n\n::: {.cell}\n\n```{.r .cell-code}\ntidied_pca |> \n  filter(component %in% paste0(\"PC\", 1:2)) |> \n  group_by(component) |>\n  top_n(8, abs(value)) |>\n  ungroup() |>\n  mutate(terms = reorder_within(terms, abs(value), component)) |>\n  ggplot(aes(abs(value), terms, fill = value > 0)) +\n  geom_col() +\n  facet_wrap(~component, scales = \"free_y\") +\n  scale_y_reordered() +\n  labs(\n    x = \"Absolute value of contribution\",\n    y = NULL, fill = \"Positive?\"\n  ) +\n  hrbrthemes::theme_ipsum()\n```\n\n::: {.cell-output-display}\n![](tidymodels-pca-and-umap_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### PCA Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njuice(pca_prep) |> \n  ggplot(aes(PC1, PC2, label = name)) +\n  geom_point(aes(color = category), alpha = 0.7, size = 2) +\n  ggrepel::geom_text_repel(max.overlaps = 10) +\n  labs(color = NULL) + hrbrthemes::theme_ipsum()\n```\n\n::: {.cell-output-stderr}\n```\nWarning: ggrepel: 927 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n```\n:::\n\n::: {.cell-output-display}\n![](tidymodels-pca-and-umap_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\nSimilar kind of cocktails are clustered together, so PCA analysis appears to be somewhat successful.\n\n\n# Uniform Manifold Automation & Projection\n\n## Recipe Prep\n\nThe embed package provides recipe steps for ways to create embeddings including UMAP.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(embed)\n\numap_rec <- recipe(~., data = cocktails_df) |>\n  update_role(name, category, new_role = \"id\") |>\n  step_normalize(all_predictors()) |>\n  step_umap(all_predictors())\n\numap_prep <- prep(umap_rec)\n\numap_prep\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        id          2\n predictor         40\n\nTraining data contained 937 data points and no missing data.\n\nOperations:\n\nCentering and scaling for light_rum, lemon_juice, lime_juice, sweet_vermo... [trained]\nUMAP embedding for light_rum, lemon_juice, lime_juice, sweet_verm... [trained]\n```\n:::\n:::\n\nSo far, the process is exactly the same as PCA. Prep the recipe and get the \"non output\"-output.\n\n::: {.cell}\n\n```{.r .cell-code}\njuice(umap_prep) |> \n  ggplot(aes(UMAP1, UMAP2, label = name)) +\n  geom_point(aes(color = category), alpha = 0.7, size = 2) +\n  ggrepel::geom_text_repel(max.overlaps = 30) +\n  labs(color = NULL) + hrbrthemes::theme_ipsum()\n```\n\n::: {.cell-output-stderr}\n```\nWarning: ggrepel: 932 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n```\n:::\n\n::: {.cell-output-display}\n![](tidymodels-pca-and-umap_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nSimilarly clustering seen here, but type of cocktails seen here are different. \n\n# Conclusion\n\nThe PCA (and UMAP) using TidyModels offers a bit more customization compared to using a regular \n`prcomp` or `PCA-Tools`.  However, it requires a bit more code and felt slightly slower in running \ncompared to the other packages (without actually testing the time fyi)^[Plots were slower to render].\n\n\n\n# Additional Reading:\n\n- Easily the best explanation of PCA on the internet:\nhttps://stats.stackexchange.com/questions/2691/making-sense-of-principal-component-analysis-eigenvectors-eigenvalues\n\n- How PCA works - interactive plots:\nhttps://setosa.io/ev/\n\n- How UMAP works:\nhttps://umap-learn.readthedocs.io/en/latest/how_umap_works.html\n\n\n\n",
    "supporting": [
      "tidymodels-pca-and-umap_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}